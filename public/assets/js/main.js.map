{"version":3,"sources":["collapsable.js","colors.js","form.js","getImage.js","localStorage.js","main.js","reset.js","share.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\nconst collapsibleTriggers = document.querySelectorAll('.js-collapsible__tigger');\n\n\nfunction updateCollapsible(event) {\n  //parentElement nos dice quien es la madre del elemento que se esta escuchando\n\n  const currentCollapsible = event.currentTarget.parentElement;\n  //Compruebo si esta abieto\n  if (currentCollapsible.classList.contains('content-collapsible')) {\n    //Si esta abierto, lo puedo cerrar\n    currentCollapsible.classList.remove('content-collapsible');\n  } else {\n    //Si esta cerrado:\n    // Los cierro todos\n    for (const item of collapsibleTriggers) {\n      item.parentElement.classList.remove('content-collapsible');\n    }\n    // Abro el correcto\n    currentCollapsible.classList.add('content-collapsible');\n  }\n}\n\nfor (const item of collapsibleTriggers) {\n  item.addEventListener('click', updateCollapsible);\n}\n","'use strict';\nconst palette1 = document.getElementById('color-option1');\nconst palette2 = document.getElementById('color-option2');\nconst palette3 = document.getElementById('color-option3');\nconst palette4 = document.getElementById('color-option4');\n\nconst card = document.querySelector('.js-card');\n\nfunction changeColorPalette() {\n  const checkedPalette = document.querySelector('input[type=radio]:checked');\n  const attr = checkedPalette.getAttribute('palette');\n  card.classList.remove('js-card-palette1');\n  card.classList.remove('js-card-palette2');\n  card.classList.remove('js-card-palette3');\n  card.classList.remove('js-card-palette4');\n  card.classList.add(`js-card-${attr}`);\n  setToLocalStorage();\n}\npalette1.addEventListener('click', changeColorPalette);\npalette2.addEventListener('click', changeColorPalette);\npalette3.addEventListener('click', changeColorPalette);\npalette4.addEventListener('click', changeColorPalette);\n","'use strict';\n\nconst nameEle = document.querySelector('.js-name');\nconst cardNameEle = document.querySelector('.js-cardTitle');\nconst jobEle = document.querySelector('.js-job');\nconst cardJobEle = document.querySelector('.js-cardJob');\nconst emailEle = document.querySelector('.js-email');\nlet cardEmailEle = document.querySelector('.js-cardEmail');\nconst phoneEle = document.querySelector('.js-phone');\nlet cardPhoneEle = document.querySelector('.js-cardPhone');\nconst linkedinEle = document.querySelector('.js-linkedin');\nlet cardLinkedinEle = document.querySelector('.js-cardLinkedin');\nconst githubEle = document.querySelector('.js-github');\nlet cardGithubEle = document.querySelector('.js-cardGithub');\nconst liElePhone = document.querySelector('.itemPhone');\nconst liEleMail = document.querySelector('.itemEmail');\nconst liEleLinkedin = document.querySelector('.itemLinkedin');\nconst liEleGithub = document.querySelector('.itemGithub');\nconst empty = '';\nconst cardImage = document.querySelector('.card__image');\nconst imgPreview = document.querySelector('.js__profile-preview');\nconst submitEl = document.querySelector('.js-button');\nconst shareEle = document.querySelector('.js-shareResult');\n\nconst cardFieldsDefaultValues = {\n  name: 'Nombre Apellido',\n  job: 'Front-end developer',\n  phone: 'tel:',\n  email: 'mailto:',\n  linkedin: '',\n  github: '',\n};\n\nfunction changeCard() {\n  let nameValue = nameEle.value;\n  if (nameValue !== empty) {\n    cardNameEle.innerHTML = nameValue;\n  } else {\n    cardNameEle.innerHTML = cardFieldsDefaultValues.name;\n  }\n\n  let jobValue = jobEle.value;\n  if (jobValue !== empty) {\n    cardJobEle.innerHTML = jobValue;\n  } else {\n    cardJobEle.innerHTML = cardFieldsDefaultValues.job;\n  }\n\n  let phoneValue = phoneEle.value;\n  if (phoneValue !== empty) {\n    liElePhone.classList.remove('opacity');\n    cardPhoneEle.href = `tel:${phoneValue}`;\n  } else {\n    liElePhone.classList.add('opacity');\n  }\n\n  let emailValue = emailEle.value;\n\n  if (emailValue !== empty) {\n    liEleMail.classList.remove('opacity');\n    cardEmailEle.href = `mailto:${emailValue}`;\n  } else {\n    liEleMail.classList.add('opacity');\n  }\n\n  let linkedinValue = linkedinEle.value;\n  if (linkedinValue !== empty) {\n    liEleLinkedin.classList.remove('opacity');\n    cardLinkedinEle.href = linkedinValue;\n  } else {\n    liEleLinkedin.classList.add('opacity');\n  }\n\n  let githubValue = githubEle.value;\n  if (githubValue !== empty) {\n    liEleGithub.classList.remove('opacity');\n    cardGithubEle.href = githubValue;\n  } else {\n    liEleGithub.classList.add('opacity');\n  }\n  setToLocalStorage();\n}\n\nnameEle.addEventListener('keyup', changeCard);\njobEle.addEventListener('keyup', changeCard);\nemailEle.addEventListener('keyup', changeCard);\nphoneEle.addEventListener('keyup', changeCard);\nlinkedinEle.addEventListener('keyup', changeCard);\ngithubEle.addEventListener('keyup', changeCard);\n\n//Validamos el formulario y añadimos la clase \"active\" cuando el formulario está cumplimentado\nconst containerForm = document.querySelector('.js-containerForm');\nconst validation = function (event) {\n  event.preventDefault();\n  activateShareButton();\n};\n\n\n//añadir disable para que no se clicke\n// Activar el boton de compartir solo si el formulario esta completo\nconst activateShareButton = function () {\n  const check = containerForm.checkValidity();\n  console.log(`entro, check: ${check}`);\n  if (check === true) {\n    submitEl.classList.add('share__button--active');\n    submitEl.disabled = false;\n\n  } else {\n    submitEl.classList.remove('share__button--active');\n    submitEl.disabled = true;\n\n\n\n    // submitEl.setAttribute('disabled', true);\n\n\n  }\n};\n\ncontainerForm.addEventListener('change', validation);\n","'use strict';\nconst fr = new FileReader();\nconst uploadBtn = document.querySelector('.js__profile-trigger');\nconst fileField = document.querySelector('.js__profile-upload-btn');\nconst profileImage = document.querySelector('.js__profile-image');\nconst profilePreviewImg = document.querySelector('.js__profile-preview-img');\n\n/**\n * Recoge el archivo añadido al campo de tipo \"file\"\n * y lo carga en nuestro objeto FileReader para que\n * lo convierta a algo con lo que podamos trabajar.\n * Añade un listener al FR para que ejecute una función\n * al tener los datos listos\n * @param {evento} e\n */\n\nfunction getImage(e) {\n  const myFile = e.currentTarget.files[0];\n  fr.addEventListener('load', setImage);\n  fr.readAsDataURL(myFile);\n}\nlet picture = '';\n\nfunction setImage() {\n  picture = fr.result;\n  previewImage();\n  setToLocalStorage();\n}\n\nfunction previewImage() {\n  if (picture !== '') {\n    profileImage.style.backgroundImage = `url(${picture})`;\n    profilePreviewImg.src = picture;\n  }\n}\n/**\n * Genera un click automático en nuesto campo de tipo \"file\"\n * que está oculto\n */\nfunction fakeFileClick(ev) {\n  ev.preventDefault();\n  fileField.click();\n}\n\n/**\n * Añadimos los listeners necesarios:\n * - al botón visible para generar el click automático\n * - al campo oculto para cuando cambie su value\n */\nuploadBtn.addEventListener('click', fakeFileClick);\nfileField.addEventListener('change', getImage);\n","'use strict';\n//Empezamos trayendo el formulario del html y creando un objeto con los inputs del formulario\nconst setToLocalStorage = () => {\n  //guardamos en una constante el valor checked de la paleta seleccionada\n  const colourChecked = document.querySelector('input[type=radio]:checked');\n  const data = {\n    name: nameEle.value,\n    job: jobEle.value,\n    phone: phoneEle.value,\n    email: emailEle.value,\n    linkedin: linkedinEle.value,\n    github: githubEle.value,\n    //metemos el valor del elemento radio seleccionado (color-option1, color-option2...) y se guarda en el objeto\n    colour: colourChecked.value,\n    photo: picture,\n  };\n  //convertimos (con setItem) el objeto en un JSON (que tiene formato string)\n  localStorage.setItem('userData', JSON.stringify(data));\n};\n\n//Para cogerlos datos al iniciar la página convertimos los datos del JSON con parse (pasa de string a objeto)\nconst getFromLocalStorage = () => {\n  const userData = JSON.parse(localStorage.getItem('userData'));\n  if (userData !== null) {\n    nameEle.value = userData.name;\n    jobEle.value = userData.job;\n    phoneEle.value = userData.phone;\n    emailEle.value = userData.email;\n    linkedinEle.value = userData.linkedin;\n    githubEle.value = userData.github;\n    picture = userData.photo;\n    //parseamos el dato del valor del checked y lo asignamos a una constante que posteriormente meteremos interpolando en el queryselector\n    const selectedPalette = userData.colour;\n    document.querySelector(`#color-option${selectedPalette}`).checked = true;\n    activateShareButton();\n    //llamamos a las funciones que ya tenemos definidas en otros partials, para que haga el hilo de, cambiar la tarjeta, volver a cargar la imagen previsualizada y vuelva a cambiar el color de la paleta seleccionada\n    changeCard();\n    previewImage();\n    changeColorPalette();\n  }\n};\n//Escucho el formulario con keyup para que, cada vez que escribo, vaya guardando en el objeto todos los values\n// containerForm.addEventListener(\"keyup\", setToLocalStorage);\ngetFromLocalStorage();\n","'use strict';\n\n","'use strict';\n\nconst btnDelete = document.querySelector('.js-button--delete');\n\n//funcion para borra los datos del form\nconst deleteData = function() {\n  // changeColorPalette();\n  colorReset();\n  const palette1 = document.getElementById('color-option1');\n  palette1.checked = true;\n  document.querySelector('.js-name').value = '';\n  document.querySelector('.js-job').value = '';\n  document.querySelector('.js-phone').value = '';\n  document.querySelector('.js-email').value = '';\n  document.querySelector('.js-linkedin').value = '';\n  document.querySelector('.js-github').value = '';\n  document.querySelector('.js__profile-upload-btn').value = '';\n  cardImage.style.backgroundImage = \"url('./assets/images/placeholderImg.jpg')\";\n  profilePreviewImg.src = './assets/images/placeholderImg.jpg';\n\n  submitEl.classList.remove('share__button--active');\n  shareEle.classList.add('share__result--hidden');\n\n  picture = '';\n  localStorage.removeItem('userData');\n};\n\nfunction colorReset() {\n  card.classList.remove('js-card-palette2');\n  card.classList.remove('js-card-palette3');\n  card.classList.remove('js-card-palette4');\n  card.classList.add('js-card-palette1');\n}\n//Funcion que se ejecuta al pulsar reset\nconst handleReset = function() {\n  //Limpio los inputs\n  deleteData();\n  //Repinto la cardResult\n  changeCard();\n};\nbtnDelete.addEventListener('click', handleReset);\n","'use strict';\n\nlet submitButton = document.querySelector('.js-button');\nlet responseURL = document.querySelector('.share__result__url');\nlet twitterURL = document.querySelector('.share__result__button');\n\nsubmitButton.addEventListener('click', sendData);\n\nfunction sendData(event) {\n  event.preventDefault();\n  let inputs = Array.from(containerForm.elements);\n  let json = getJSONFromInputs(inputs);\n  json.photo = picture;\n  // Enviar la paleta seleccionada al servidor\n  json.palette = document.querySelector(\n    'input[name=\"color-options\"]:checked'\n  ).value;\n  sendRequest(json);\n}\n\nfunction getJSONFromInputs(inputs) {\n  return inputs.reduce(function(acc, val) {\n    if (val.nodeName !== 'BUTTON') acc[val.name] = val.value;\n    return acc;\n  }, {});\n}\n\nfunction sendRequest(json) {\n  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {\n    method: 'POST',\n    body: JSON.stringify(json),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then(function(resp) {\n      return resp.json();\n    })\n    .then(function(result) {\n      showURL(result);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n}\n\n// Si los datos del servidor son correctos, obtenemos la URL y la pintamos\nfunction showURL(result) {\n  if (result.success) {\n    responseURL.href = result.cardURL;\n    responseURL.innerHTML = result.cardURL;\n\n    let twitterMsg = 'This is my awesome contact card!!';\n    twitterURL.href = `https://twitter.com/intent/tweet?text=${twitterMsg} ${result.cardURL}`;\n\n    shareEle.classList.remove('share__result--hidden');\n  } else {\n    responseURL.innerHTML = 'ERROR:' + result.error;\n  }\n}\n"]}
